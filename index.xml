<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>rand0m's blog</title><link>https://rand0m42195.github.io/</link><description>Recent content on rand0m's blog</description><generator>Hugo -- 0.150.0</generator><language>zh</language><lastBuildDate>Mon, 22 Sep 2025 20:43:51 +0800</lastBuildDate><atom:link href="https://rand0m42195.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>网络数据包接受过程分析——从网卡到内核协议栈（以Intel e1000 + Linux 4.4为例）</title><link>https://rand0m42195.github.io/posts/linux-networking-receive/</link><pubDate>Mon, 22 Sep 2025 20:43:51 +0800</pubDate><guid>https://rand0m42195.github.io/posts/linux-networking-receive/</guid><description>&lt;h1 id="引言"&gt;引言&lt;/h1&gt;
&lt;p&gt;网络数据包从网卡到应用程序，需要经历一段复杂的旅程。作为开发者，我们平时调用 &lt;code&gt;socket()&lt;/code&gt;、&lt;code&gt;recv()&lt;/code&gt; 就能轻松拿到数据，却很少思考内核背后究竟发生了什么。&lt;/p&gt;
&lt;p&gt;本系列文章尝试结合 &lt;strong&gt;理论流程 + 内核源码分析&lt;/strong&gt;，逐步剖析 Linux 内核中网络数据包的接收过程。这里选择 Linux 4.4 内核作为例子（代码相对稳定，资料丰富，逻辑上没有过多新特性干扰），并结合 Intel e1000 驱动来具体展示数据包是如何从网卡到达内核网络协议栈的。&lt;/p&gt;
&lt;h1 id="网络数据包接收的总体流程"&gt;网络数据包接收的总体流程&lt;/h1&gt;
&lt;p&gt;先给出一个全局视角：数据包从网卡到达内存，再到协议栈的路径，大致如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;数据包到达网卡&lt;/strong&gt;
网卡硬件接收以太帧，做基本校验（如 CRC）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DMA 写入内存&lt;/strong&gt;
网卡通过 DMA 将数据包写入驱动预先分配好的接收缓冲区（Descriptor Ring）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中断通知 CPU&lt;/strong&gt;
网卡通过 IRQ 告诉 CPU：“我收到了新数据包”。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;驱动中断处理函数（ISR）&lt;/strong&gt;
驱动快速处理中断，通常只是调用 &lt;code&gt;__napi_schedule()&lt;/code&gt;，把 NAPI poll 加入调度队列。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;软中断调度 NAPI poll&lt;/strong&gt;
CPU 执行 &lt;code&gt;do_softirq()&lt;/code&gt; → &lt;code&gt;net_rx_action()&lt;/code&gt; → 调用 e1000 的 poll 函数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;poll 函数提取数据包并构造 skb&lt;/strong&gt;
驱动在 poll 中读取 DMA ring 的描述符，把数据包封装进 &lt;code&gt;sk_buff&lt;/code&gt; 结构，交给内核网络子系统。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协议栈处理&lt;/strong&gt;
skb 被送到 IP 层，进一步交给 TCP/UDP，最终到达 socket，供应用程序读取。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="网卡收包流程" loading="lazy" src="https://rand0m42195.github.io/images/posts/linux-networking-receive/nic-networking-stack.png"&gt;&lt;/p&gt;</description></item><item><title>About</title><link>https://rand0m42195.github.io/about/</link><pubDate>Fri, 19 Sep 2025 17:26:55 +0800</pubDate><guid>https://rand0m42195.github.io/about/</guid><description>&lt;p&gt;一枚程序员，编程语言：&lt;code&gt;C&lt;/code&gt;/&lt;code&gt;Go&lt;/code&gt;/&lt;code&gt;Rust&lt;/code&gt;，喜欢研究操作系统的底层实现以及编程语言的实现原理，还喜欢阅读和跑步。&lt;/p&gt;</description></item><item><title>First Blog</title><link>https://rand0m42195.github.io/posts/first-blog/</link><pubDate>Fri, 19 Sep 2025 17:26:03 +0800</pubDate><guid>https://rand0m42195.github.io/posts/first-blog/</guid><description>&lt;h1 id="测试"&gt;测试&lt;/h1&gt;
&lt;p&gt;这是第一篇博客！&lt;/p&gt;</description></item></channel></rss>